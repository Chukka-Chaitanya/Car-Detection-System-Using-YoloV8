import pandas as pd
import os
import shutil
from PIL import Image
from sklearn.model_selection import train_test_split

def convert_and_organize_data(base_folder):
    """
    Converts a CSV file to YOLO format and organizes the dataset.
    
    Args:
        base_folder (str): Path to the root dataset folder (e.g., '/Users/sujit/Desktop/chaitanyaintel/data2').
    """
    try:
        # Define paths based on your provided screenshot and corrected path
        csv_file_path = os.path.join(base_folder, 'train_solution_bounding_boxes (1).csv')
        images_source_dir = os.path.join(base_folder, 'training_images')
        
        # Create new directories for the YOLO format
        yolo_images_dir = os.path.join(base_folder, 'images')
        yolo_labels_dir = os.path.join(base_folder, 'labels')
        
        os.makedirs(os.path.join(yolo_images_dir, 'train'), exist_ok=True)
        os.makedirs(os.path.join(yolo_images_dir, 'val'), exist_ok=True)
        os.makedirs(os.path.join(yolo_labels_dir, 'train'), exist_ok=True)
        os.makedirs(os.path.join(yolo_labels_dir, 'val'), exist_ok=True)

        # Read the CSV file
        df = pd.read_csv(csv_file_path)
        
        # Get a list of all unique images and split them for training and validation
        # The correct column name is 'image'
        unique_images = df['image'].unique()
        train_images, val_images = train_test_split(unique_images, test_size=0.2, random_state=42)
        
        # Process and copy files
        class_id = 0 # Assuming 'can' is the only class
        
        for image_name in unique_images:
            image_path = os.path.join(images_source_dir, image_name)
            
            if not os.path.exists(image_path):
                print(f"Warning: Image {image_path} not found. Skipping.")
                continue
                
            with Image.open(image_path) as img:
                img_width, img_height = img.size
            
            # Determine if the image is for training or validation
            if image_name in train_images:
                image_dest_dir = os.path.join(yolo_images_dir, 'train')
                label_dest_dir = os.path.join(yolo_labels_dir, 'train')
            else:
                image_dest_dir = os.path.join(yolo_images_dir, 'val')
                label_dest_dir = os.path.join(yolo_labels_dir, 'val')
            
            # Copy the image to the new location
            shutil.copy(image_path, os.path.join(image_dest_dir, image_name))
            
            # Create the corresponding label file
            image_df = df[df['image'] == image_name]
            label_file_path = os.path.join(label_dest_dir, os.path.splitext(image_name)[0] + '.txt')
            
            with open(label_file_path, 'w') as f:
                for _, row in image_df.iterrows():
                    xmin = row['xmin']
                    ymin = row['ymin']
                    xmax = row['xmax']
                    ymax = row['ymax']
                    
                    x_center = ((xmin + xmax) / 2) / img_width
                    y_center = ((ymin + ymax) / 2) / img_height
                    width = (xmax - xmin) / img_width
                    height = (ymax - ymin) / img_height
                    
                    f.write(f"{class_id} {x_center} {y_center} {width} {height}\n")
        
        print("Dataset preparation complete! Your data is now organized for YOLOv5.")

    except KeyError as e:
        print(f"KeyError: {e}. Check your CSV column names.")
        print("The script expects 'image', 'xmin', 'ymin', 'xmax', 'ymax'.")
    except FileNotFoundError as e:
        print(f"FileNotFoundError: {e}. Check your paths and file names.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# --- Main execution block ---
if __name__ == '__main__':
    # Make sure this path is correct for your system
    dataset_base_path = '/Users/sujit/Desktop/chaitanyaintel/data2'
    convert_and_organize_data(dataset_base_path)
